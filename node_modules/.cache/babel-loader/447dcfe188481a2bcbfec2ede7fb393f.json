{"ast":null,"code":"var _jsxFileName = \"/home/eike/Projects/d3/map_plot/src/Marks.js\";\nimport { geoEqualEarth, geoPath } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst projection = geoEqualEarth();\nconst path = geoPath().projection(projection);\nexport const Marks = ({\n  data: {\n    countries,\n    interiors\n  }\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"map\",\n    children: [/*#__PURE__*/_jsxDEV(\"text\", {\n      className: \"header\",\n      children: \"Worldmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"map-sphere\",\n      d: path({\n        type: 'Sphere'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), countries.features.map(feature => /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"map-plot\",\n      d: path(feature)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"map-inner\",\n      d: path(interiors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this)\n}, void 0, false);\n_c = Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"sources":["/home/eike/Projects/d3/map_plot/src/Marks.js"],"names":["geoEqualEarth","geoPath","projection","path","Marks","data","countries","interiors","type","features","map","feature"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,IAAvC;;;AAEA,MAAMC,UAAU,GAAGF,aAAa,EAAhC;AACA,MAAMG,IAAI,GAAGF,OAAO,GAAGC,UAAV,CAAqBA,UAArB,CAAb;AAEA,OAAO,MAAME,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb;AAAR,CAAD,kBACjB;AAAA,yBAEI;AAAG,IAAA,SAAS,EAAC,KAAb;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,SAAS,EAAC,YAAhB;AACI,MAAA,CAAC,EAAEJ,IAAI,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD;AADX;AAAA;AAAA;AAAA;AAAA,YAFJ,EAMKF,SAAS,CAACG,QAAV,CAAmBC,GAAnB,CAAuBC,OAAO,iBAC3B;AACI,MAAA,SAAS,EAAC,UADd;AAEI,MAAA,CAAC,EAAGR,IAAI,CAACQ,OAAD;AAFZ;AAAA;AAAA;AAAA;AAAA,YADH,CANL,eAYI;AACI,MAAA,SAAS,EAAC,WADd;AAEI,MAAA,CAAC,EAAER,IAAI,CAACI,SAAD;AAFX;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ,iBADG;KAAMH,K","sourcesContent":["import { geoEqualEarth, geoPath } from 'd3';\n\nconst projection = geoEqualEarth();\nconst path = geoPath().projection(projection);\n\nexport const Marks = ({ data: { countries, interiors } }) => (\n    <>\n    \n        <g className=\"map\">\n            <text className=\"header\">Worldmap</text>\n            <path className=\"map-sphere\"\n                d={path({ type: 'Sphere' })}\n            />\n\n            {countries.features.map(feature => (\n                <path\n                    className=\"map-plot\" \n                    d= {path(feature)}\n                />\n            ))}    \n            <path\n                className=\"map-inner\"\n                d={path(interiors)}\n            />  \n        </g>\n    </>\n);\n\n"]},"metadata":{},"sourceType":"module"}