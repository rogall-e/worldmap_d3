{"ast":null,"code":"var _jsxFileName = \"/home/eike/Projects/d3/map_plot/src/Marks.js\";\nimport { geoNaturalEarth1, geoPath, geoGraticule } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst projection = geoNaturalEarth1();\nconst path = geoPath().projection(projection);\nconst graticule = geoGraticule();\nexport const Marks = ({\n  worldMap: {\n    land,\n    interiors\n  },\n  cities\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"map\",\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"map-sphere\",\n      d: path({\n        type: 'Sphere'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"graticules\",\n      d: path(graticule())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), land.features.map(feature => /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"land\",\n      d: path(feature)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"country-borders\",\n      d: path(interiors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this)\n}, void 0, false);\n_c = Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"sources":["/home/eike/Projects/d3/map_plot/src/Marks.js"],"names":["geoNaturalEarth1","geoPath","geoGraticule","projection","path","graticule","Marks","worldMap","land","interiors","cities","type","features","map","feature"],"mappings":";AAAA,SAASA,gBAAT,EAA2BC,OAA3B,EAAoCC,YAApC,QAAwD,IAAxD;;;AAEA,MAAMC,UAAU,GAAGH,gBAAgB,EAAnC;AACA,MAAMI,IAAI,GAAGH,OAAO,GAAGE,UAAV,CAAqBA,UAArB,CAAb;AACA,MAAME,SAAS,GAAGH,YAAY,EAA9B;AAEA,OAAO,MAAMI,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAZ;AAAiCC,EAAAA;AAAjC,CAAD,kBACjB;AAAA,yBAEI;AAAG,IAAA,SAAS,EAAC,KAAb;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,YAAhB;AACI,MAAA,CAAC,EAAEN,IAAI,CAAC;AAAEO,QAAAA,IAAI,EAAE;AAAR,OAAD;AADX;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAM,MAAA,SAAS,EAAC,YAAhB;AACI,MAAA,CAAC,EAAEP,IAAI,CAACC,SAAS,EAAV;AADX;AAAA;AAAA;AAAA;AAAA,YAJJ,EAOKG,IAAI,CAACI,QAAL,CAAcC,GAAd,CAAkBC,OAAO,iBACtB;AACI,MAAA,SAAS,EAAC,MADd;AAEI,MAAA,CAAC,EAAGV,IAAI,CAACU,OAAD;AAFZ;AAAA;AAAA;AAAA;AAAA,YADH,CAPL,eAaI;AACI,MAAA,SAAS,EAAC,iBADd;AAEI,MAAA,CAAC,EAAEV,IAAI,CAACK,SAAD;AAFX;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ,iBADG;KAAMH,K","sourcesContent":["import { geoNaturalEarth1, geoPath, geoGraticule } from 'd3';\n\nconst projection = geoNaturalEarth1();\nconst path = geoPath().projection(projection);\nconst graticule = geoGraticule();\n\nexport const Marks = ({ worldMap: { land, interiors }, cities }) => (\n    <>\n    \n        <g className=\"map\">\n            <path className=\"map-sphere\"\n                d={path({ type: 'Sphere' })}\n            />\n            <path className=\"graticules\"\n                d={path(graticule())}\n            />  \n            {land.features.map(feature => (\n                <path\n                    className=\"land\" \n                    d= {path(feature)}\n                />\n            ))}    \n            <path\n                className=\"country-borders\"\n                d={path(interiors)}\n            />\n           \n        </g>\n    </>\n);\n\n"]},"metadata":{},"sourceType":"module"}